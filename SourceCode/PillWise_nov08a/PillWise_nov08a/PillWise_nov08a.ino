#include "arduino_secrets.h"
// NoDelay - Version: Latest 


/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/2e9ac3a6-6387-4bbf-bab3-ffd88745cda8 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float adherencePercent;
  int pillsToDispenseCont1;
  int pillsToDispenseCont2;
  int receivedDoses;
  int skippedDoses;
  int totalDoses;
  CloudSchedule doseSchedule;
  bool dispenseButton;
  bool dispensingActive;
  bool isPillDispensingEnable;
  bool notReceived;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP32Servo.h>
#include <NoDelay.h>

noDelay monitorTimer(1000);

class PillDispenser
{
  public:
  
    int pinDispense;
     PillDispenser(int pin)
    {
      pinMode(pin, OUTPUT);
      pinDispense = pin;
    }
    
    void dispensePill()
    {
      digitalWrite(pinDispense, HIGH);
      delay(2000);
      digitalWrite(pinDispense, LOW);
      Serial.println("Dispensando");
    }
    
    void dispensePills(int pillsToDispense)
    {
      for (int pill = 1; pill <= pillsToDispense; pill++) 
      {
        dispensePill();
      }
    }
};

PillDispenser pillDispenser1(18); 
PillDispenser pillDispenser2(19); 

void setup() {
  dispensingActive = false;
      Serial.println("Dispensing Active " + String(dispensingActive));

  monitorTimer.start();
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

bool isDoseScheduleActive;
bool doseReceived;
void loop() {
  ArduinoCloud.update();
  // Your code here
  if(ArduinoCloud.connected())
  {
    if(monitorTimer.update())
    {
      float percent = totalDoses == 0 ? 0.0f : float(receivedDoses) / totalDoses * 100.0f;
      adherencePercent = static_cast<int>(percent);
      Serial.println("Enable " + String(isPillDispensingEnable));
      /*Serial.println("Your adherence is of " + String(adherencePercent) + "%");*/

    }

    if (isDoseScheduleActive != doseSchedule.isActive()) // To avoid executing on each loop
    {
      
      isDoseScheduleActive = doseSchedule.isActive();doseReceived = false;
      if(!isDoseScheduleActive && !doseReceived)
      { 
        notReceived = true;
        ArduinoCloud.update();
        
        skippedDoses++;
      }
      if(!isDoseScheduleActive)
      {
        doseReceived = false;
      }
      
      if(isDoseScheduleActive)
      {
        isPillDispensingEnable = true;
        
        
      }
    }
  }
  notReceived = false;
}



/*
  Since DispenseButton is READ_WRITE variable, onDispenseButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDispenseButtonChange()  {
  // Add your code here to act upon DispenseButton change
  Serial.println("Boton presionado" + String(dispenseButton));
  if( dispenseButton && doseSchedule.isActive() && isPillDispensingEnable)
  {
    
    
    Serial.println("Dispensing Active " + String(dispensingActive));
    pillDispenser1.dispensePills(pillsToDispenseCont1);
    pillDispenser2.dispensePills(pillsToDispenseCont2);
    dispensingActive = true;
    ArduinoCloud.update();
    isPillDispensingEnable = false;

    receivedDoses++;
    doseReceived = true;
    dispensingActive = false;
    ArduinoCloud.update();
  }
}

/*
  Since DoseSchedule is READ_WRITE variable, onDoseScheduleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDoseScheduleChange()  {
  // Add your code here to act upon DoseSchedule change
  totalDoses++;
}

/*
  Since IsPillDispensingEnable is READ_WRITE variable, onIsPillDispensingEnableChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsPillDispensingEnableChange()  {
  // Add your code here to act upon IsPillDispensingEnable change
}

/*
  Since PillsToDispenseCont1 is READ_WRITE variable, onPillsToDispenseCont1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPillsToDispenseCont1Change()  {
  // Add your code here to act upon PillsToDispenseCont1 change
}

/*
  Since PillsToDispenseCont2 is READ_WRITE variable, onPillsToDispenseCont2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPillsToDispenseCont2Change()  {
  // Add your code here to act upon PillsToDispenseCont2 change
}

/*
  Since IsDispensingActivated is READ_WRITE variable, onIsDispensingActivatedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsDispensingActivatedChange()  {
  // Add your code here to act upon IsDispensingActivated change
}






/*
  Since TotalDoses is READ_WRITE variable, onTotalDosesChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTotalDosesChange()  {
  // Add your code here to act upon TotalDoses change
}

/*
  Since ReceivedDoses is READ_WRITE variable, onReceivedDosesChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onReceivedDosesChange()  {
  // Add your code here to act upon ReceivedDoses change
}

/*
  Since SkippedDoses is READ_WRITE variable, onSkippedDosesChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSkippedDosesChange()  {
  // Add your code here to act upon SkippedDoses change
}

/*
  Since AdherencePercent is READ_WRITE variable, onAdherencePercentChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAdherencePercentChange()  {
  // Add your code here to act upon AdherencePercent change
}






/*
  Since DispensingActive is READ_WRITE variable, onDispensingActiveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDispensingActiveChange()  {
  // Add your code here to act upon DispensingActive change
}


/*
  Since UniversalDispense is READ_WRITE variable, onUniversalDispenseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUniversalDispenseChange()  {
  // Add your code here to act upon UniversalDispense change
}

/*
  Since NotReceived is READ_WRITE variable, onNotReceivedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNotReceivedChange()  {
  // Add your code here to act upon NotReceived change
}
