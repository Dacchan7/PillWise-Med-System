#include "arduino_secrets.h"
// NoDelay - Version: Latest 

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/bae652e0-775b-4a98-87d7-333ddf065d13 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int tankPercentage;
  bool activateDispensing;
  bool dispenseButton;
  bool dispensingActive;
  bool isAquaWiseEnable;
  bool isWaterDispensing;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <NewPing.h>
#include <NoDelay.h>

noDelay monitorTimer(1000);
class SonarTank : public NewPing
{
  public:

    SonarTank(uint8_t triggerPin, uint8_t echoPin, unsigned int maxDistance) : NewPing(triggerPin, echoPin, maxDistance)
    {
      
    }
    
    int fullTank = 3;
    int minTank = 8;
    
    void defineConstraints(int minTank, int fullTank)
    {
      this->fullTank = fullTank;
      this->minTank = minTank;
    }
    
    int getTankPercentage()
    {
      float percentage = float(minTank - ping_cm()) / float(minTank - fullTank) * 100.0;
      return int(percentage);
    }
};
SonarTank sonarTank(26, 25, 200);

void setup() {
  pinMode(18, OUTPUT);
  isWaterDispensing = false;
  tankPercentage = sonarTank.getTankPercentage();
  
  monitorTimer.start();
  Serial.begin(9600);
  while (!Serial) {
    ; // Wait for serial port to connect. Needed for native USB port only
  }

  // Initialize properties and cloud connection
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

NewPing sonarInterface(33, 32, 200);

class WaterPump
{
  private:
  
    noDelay timer;
    int pumpPin;
    
  public:
  
    WaterPump(int pumpPin)
    {
      this-> pumpPin;
    }
    
    void dispense(int interval = 6000)
    {
      
      int glassDistance = sonarInterface.ping_cm();
      
      if(!isWaterDispensing && glassDistance <= 5)
      {
        timer.setdelay(interval);
        timer.start();
        
        isWaterDispensing = true;
        Serial.println("Dispensing");
      } else if (glassDistance > 3) {
        Serial.println("Glass way too far at " + String(glassDistance) + "cm");
      }
    }
    
    void update()
    {
      if (timer.update() || tankPercentage <= 2)
      {
        digitalWrite(pumpPin, LOW);
        isWaterDispensing = false;
        timer.stop();
      }
      
      if (timer.update())
      {
        Serial.println("Finished!");
      }
    }
};

WaterPump waterPump(18);

void loop() {
  ArduinoCloud.update();
  if(ArduinoCloud.connected())
  {
     waterPump.update();
     digitalWrite(18, isWaterDispensing);
     if(monitorTimer.update())
     {
       tankPercentage = sonarTank.getTankPercentage();
       Serial.println("Distance to water " + String(sonarTank.ping_cm()) + "cm (" + String(tankPercentage) + "%)");
     }
  }
}
/*
  Since IsAquaWiseEnable is READ_WRITE variable, onIsAquaWiseEnableChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsAquaWiseEnableChange()  {
  // Add your code here to act upon IsAquaWiseEnable change
}

/*
  Since ActivateDispensing is READ_WRITE variable, onActivateDispensingChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onActivateDispensingChange()  {
  // Add your code here to act upon ActivateDispensing change
}

/*
  Since DispenseButton is READ_WRITE variable, onDispenseButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDispenseButtonChange()  {
  // Add your code here to act upon DispenseButton change
  waterPump.dispense();
}

/*
  Since DispensingActive is READ_WRITE variable, onDispensingActiveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDispensingActiveChange()  {
  // Add your code here to act upon DispensingActive change
  if (isAquaWiseEnable && dispensingActive)
  {
    waterPump.dispense();
  }
}





/*
  Since TankPercentage is READ_WRITE variable, onTankPercentageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTankPercentageChange()  {
  // Add your code here to act upon TankPercentage change
}

/*
  Since IsWaterDispensing is READ_WRITE variable, onIsWaterDispensingChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsWaterDispensingChange()  {
  // Add your code here to act upon IsWaterDispensing change
}


/*
  Since UniversalDispense is READ_WRITE variable, onUniversalDispenseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUniversalDispenseChange()  {
  // Add your code here to act upon UniversalDispense change
}
